#ifndef LLP_AST_NODE_TYPE_H
#define LLP_AST_NODE_TYPE_H

enum ast_node_type {
    AST_NODE_ID,
    AST_NODE_VAL_INT,
    AST_NODE_VAL_FLOAT,
    AST_NODE_VAL_BOOL,
    AST_NODE_VAL_STRING,
    AST_NODE_FIELD_LIST,
    AST_NODE_FIELD,
    AST_NODE_PROPERTY_LIST,
    AST_NODE_PROPERTY,
    AST_NODE_OP_EQ,
    AST_NODE_OP_LESS,
    AST_NODE_OP_GREATER,
    AST_NODE_ENTITY,
    AST_NODE_ENTITY_LIST,
    AST_NODE_ENTITY_BODY,
    AST_NODE_CONDITION,
    AST_NODE_CONDITION_BODY,
    AST_NODE_QUERY_SELECT,
    AST_NODE_QUERY_INSERT,
    AST_NODE_QUERY_UPDATE,
    AST_NODE_QUERY_DELETE,
    AST_NODE_REPR_BODY,
    AST_NODE_REPR_LIST,
    AST_NODE_REPR_FIELD,
};

static const char *ast_node_type_to_string[] = {
        "AST_NODE_ID",
        "AST_NODE_VAL_INT",
        "AST_NODE_VAL_FLOAT",
        "AST_NODE_VAL_BOOL",
        "AST_NODE_VAL_STRING",
        "AST_NODE_FIELD_LIST",
        "AST_NODE_FIELD",
        "AST_NODE_PROPERTY_LIST",
        "AST_NODE_PROPERTY",
        "AST_NODE_OP_EQ",
        "AST_NODE_OP_LESS",
        "AST_NODE_OP_GREATER",
        "AST_NODE_ENTITY",
        "AST_NODE_ENTITY_LIST",
        "AST_NODE_ENTITY_BODY",
        "AST_NODE_CONDITION",
        "AST_NODE_CONDITION_BODY",
        "AST_NODE_QUERY_SELECT",
        "AST_NODE_QUERY_INSERT",
        "AST_NODE_QUERY_UPDATE",
        "AST_NODE_QUERY_DELETE",
        "AST_NODE_REPR_BODY",
        "AST_NODE_REPR_LIST",
        "AST_NODE_REPR_FIELD",
};

#endif//LLP_AST_NODE_TYPE_H
